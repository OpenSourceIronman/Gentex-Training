// Single Line Comment

/********
 *
 * $ FILENAME: d1.1.dxl
 * $ DESCRIPTION: First DOORS DXL script by Blaze Sanders
 *
 * https://www.ibm.com/docs/en/SSYQBZ_9.7.0/com.ibm.doors.requirements.doc/topics/dxl_reference_manual.pdf
 *  
 * https://www.ibm.com/docs/en/ermd/9.7.0?topic=roadmap-license-options
 * https://www.ibm.com/products/requirements-management/pricing
 *
 * https://www.ibm.com/docs/en/ermd/9.7.0?topic=doors-web-access-overview
 * https://www.ibm.com/docs/en/ermd/9.7.0?topic=server-installing-windows-systems
 * 
 * https://www.ibm.com/docs/en/ermd/9.7.0?topic=overview-doors
 * https://thecloudstrap.com/doors-dxl-tutorial-part-2/
 * https://www.ibm.com/docs/en/ermd/9.7.0?topic=traceability-analyzing-links-using-explorer
 *
 * #!/usr/bin/env dxl
/********

// TODO Read page 18 to 22, 26, and ??? of manual
// TODO Read page 39 for checkDXL functions

//TODO module Debug
#include <Debug.dxl>


print("\tHello World\n") 

int c = 0, count = 1
int binaryCount = 0b1011
int hexCount = 0x2F
real j = 42.1
char xDotCom= "X"
bool isEmpty = true
string k = "Free World"
Object testObj = null

if (null obj){
    ack "This object is null"
}

//void function return type
// '\ddd' is a bit pattern
print("c = " c ", and is an interger.\n")

c++ 
print("c = " c " after ++.") 
c--
print("c = " c " afer --.") 

if(c == 0){
    print("Math works!\n")
}
else if(c == -1){
    print("THIS SHOULD NEVER HAPPEN!")
    // Terminate execution of script
    halt
}
else{
    print("Sorry mate")
}

// Modulo
c = 42
int mask = 8
intResult = c % 5
realResult = j % 5 

print("42 % 5 = " intResult)
print("42.1 % 5 = " realResult)


// Bitwise AND
if(c & mask == 8){
    print("Bitwise AND worked")
}


// Bitwise OR
if(c | mask == 42){
    print("Bitwise OR worked")
}


// Bitwise NOT
bitNotResult = ~mask
print("Bitwise NOT using 16, 32, or 64 bits? " bitNotResult)



if(!islower(xDotCom)){
    print("\n\n X is not lowercase \t")
}

if(isalpha(xDotCom)_{
    print("X is an alpha character a to z or A to Z \t")
    // isdigit() - 0 to 9
    // issdigit() - HEX digits 0 to 9 and A to F and a to F
}


for i in 65:90 by 1 do{
    print(charof(i "\t"))
}


for(i=0; i<10; i++){
    sum += sqrt(i) 
    print(sum)
    if(sum > 5) break
}


bool isPrime(int num){
    foundPrime = false

    //TODO Fast prime search    

    return foundPrime
}


void myPrint(string str){
    //TODO print(str.toupper)
    //TODO char c = str[0] add for loop and add or subtract 32 (upper / lower offset)
}

// Pass By Reference

void byRefTest(int k, int &w){
    k = k + 100
    w = w + 200
}

int jj = random 10      // Random from 0 to 10???   TODO
obj = (Object jj)       // Cast interger to an Object type 


int k = 0, w = 150
print("BEFORE k = " k "\t" "w = " w)
byRefTest(k, w)
print("AFTER k = " k "\t" "w = " w)

bool aa = true
bool bb = truw
int i = 0
while(aa and bb){
    print(i "\n")
    if(i > 20){
        bb = false
    }
    i = i + 1
}


// Static Array
int array[5] = {0, 2, 4, 6, 8}   // {} might not be valid??? TODO
int i

for i in 0 : (sizeof(array)-1) do{
    print(array[i] "\t")
}

// Dynamic Array
Array oneD = create(5, 1) // = {9, 8, 7, 6, 5}
Array twoD = create(3, 2) // = {{2, 4, 6}, {1, 3, 5}}

put(oneD, 9, 0, 1)
put(oneD, 8, 1, 1)
put(oneD, 7, 2, 1)
put(oneD, 6, 3, 1)
put(oneD, 5, 4, 1)

put(twoD, 2, 0, 1)
put(twoD, 4, 1, 1)
put(twoD, 6, 2, 1)
put(twoD, 1, 0, 2)
put(twoD, 3, 1, 2)
put(twoD, 5, 2, 2)


int element = -1
int x = 0
int y = 1

for(x=0; x<5; x++){
    element = (int get(oneD, x, 1))
        print("oneD  [" x ", 1"] = " element)

}

for(x=0; x<3; x++){
    for(y=1; y<3; y++){
        element = (int get(twoD, x, y))
        print("twoD  [" x ", " y "] = " element)
    }
}

sort(oneD)
print(oneD)


delete(oneD)
delete(twoD)


string trimTrailingSpaceCharacter(string str){
    int iPos = length(str) - 1

    while(isspace(str[iPos])){
        iPos -= 1
        if(iPos < 0) return ""
    }

    return str[0:iPos]
}


string badString = "Happy Birthday       "


string goodString = trimTrailingSpaceCharacter(badString)
print("Trimmed string = " goodString "!\n")


// Run DXL script for # of cycles
pragma runLim, 1000000


activateURL("www.nasa.gov")
